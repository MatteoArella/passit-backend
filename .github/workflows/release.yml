name: Release
on:
  push:
    branches:
      - master

env:
  USER_POOL_DOMAIN_PREFIX: passit
  GOOGLE_ANDROID_CLIENT_ID: ${{ secrets.GOOGLE_ANDROID_CLIENT_ID }}
  GOOGLE_WEB_CLIENT_ID: ${{ secrets.GOOGLE_WEB_CLIENT_ID }}
  GOOGLE_WEB_CLIENT_SECRET: ${{ secrets.GOOGLE_WEB_CLIENT_SECRET }}
  NODE_VERSION: 12.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache-node
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: scripts/install.sh

      - name: Build
        run: yarn run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: |
            app/*/dist
            app/*/*.zip
            packages/*/dist
            packages/*/*.zip
            test/*/dist
            test/*/*.zip

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache-node
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: scripts/install.sh

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      - name: Test
        run: yarn run test
  
  staging:
    needs: test
    runs-on: ubuntu-latest
    env:
      USER_POOL_DOMAIN_PREFIX: passit-staging

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache-node
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: scripts/install.sh

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: CDK bootstrap
        run: yarn run cdk:bootstrap

      - name: CDK Synth
        run: yarn run cdk:synth

      - name: CDK deploy
        run: yarn run deploy
      
      - name: E2E tests
        run: yarn run test:e2e

  deploy:
    needs: staging
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache-node
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: scripts/install.sh

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: CDK bootstrap
        run: yarn run cdk:bootstrap

      - name: CDK Synth
        run: yarn run cdk:synth

      - name: CDK diff
        run: yarn run cdk:diff

      - name: CDK deploy
        run: yarn run deploy

  complete:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: build-artifact
